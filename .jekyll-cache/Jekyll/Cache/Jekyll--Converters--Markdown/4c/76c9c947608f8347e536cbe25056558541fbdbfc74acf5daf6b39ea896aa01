I"˜H<h1 id="what-is-a-debounceanyway">What is a Debounce¬†anyway?</h1>
<p>Debounce is a pattern to limit the rate at which function can fire. It returns a function, which can only be triggered when there is a user-provided delay in its invocations. If the function is getting triggered continuously, without the delay, it will not be called.</p>

<h2 id="variations">Variations</h2>
<ol>
  <li><em>Lazy</em>: function invocation happens on the trailing edge.</li>
  <li><em>Early</em>: function invocation happens on the leading edge.</li>
</ol>

<h2 id="advantages">Advantages</h2>
<ol>
  <li>Improve the performance by regulating the rate at which a function can be triggered.</li>
  <li>Make your code more meaningful, by calling the handler only when we need for it.</li>
</ol>

<h2 id="conceptual-diagram">Conceptual Diagram</h2>
<p><img src="/assets/post-images/debounce-architecure.png" alt="" /></p>

<h2 id="case-study-google-autocomplete-suggestions">Case Study‚Ää-‚ÄäGoogle autocomplete suggestions</h2>

<p><img src="/assets/post-images/debounce-google.png" alt="" /></p>

<p>Google search is an interesting case of debounce pattern. If you are designing this page, you may want to consider the following</p>

<ol>
  <li>On every meaning full keyword, we want to provide autocomplete suggestions to the user.</li>
  <li>Providing suggestions too early, maybe at every keypress, would be meaningless. Also, it will put unnecessary load on the server.</li>
  <li>Providing it too late would defeat the purpose of autocomplete suggestions.</li>
</ol>

<p>Debounce is a standard pattern to solve this kind of problem.</p>

<h2 id="step-by-step-guide-for-building-a-debounce-function">Step by step guide for building a Debounce function.</h2>
<blockquote>
  <p>Note: if you are in a hurry, you can directly jump to the section ‚ÄúFinal working sample.‚Äù and copy the code¬†:)
Else, let‚Äôs follow below step by step guide.</p>
</blockquote>

<h3 id="step-1-delay-the-functioncall">Step 1: Delay the function¬†call.</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cm">/*
 * DEBOUNCE
 */</span>
<span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="cm">/*
 * TEST
 */</span>
<span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
<span class="kd">function</span> <span class="nx">timer</span><span class="p">(){</span>
  <span class="k">return</span> <span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello Debounce!</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">logMsg</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">msg</span><span class="p">}</span><span class="s2"> Time: </span><span class="p">${</span><span class="nx">timer</span><span class="p">()}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">smartLogMsg</span> <span class="o">=</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">logMsg</span><span class="p">,</span> <span class="mi">400</span><span class="p">);</span>
<span class="nx">smartLogMsg</span><span class="p">();</span> <span class="c1">// will be called at 400+ ms.</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">smartLogMsg</span><span class="p">,</span> <span class="mi">300</span><span class="p">);</span> <span class="c1">// will be called at 700+ ms.</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">smartLogMsg</span><span class="p">,</span> <span class="mi">800</span><span class="p">);</span> <span class="c1">// will be called at 1200+ ms.</span>
</code></pre></div></div>

<p>Output:</p>

<pre><code class="language-csv">Hello Debounce! Time: 402.9799999552779
test.js:18 Hello Debounce! Time: 705.5549999931827
test.js:18 Hello Debounce! Time: 1200.894999958109

</code></pre>

<h2 id="step-2-limit-the-number-of-functioncalls">Step 2: Limit the number of function¬†calls.</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * DEBOUNCE
 */</span>
<span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">timeout</span><span class="p">;</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="c1">// Clear the timeout if it get called before the wait period.</span>
    <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
    <span class="nx">timeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="cm">/*
 * TEST
 */</span>
<span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
<span class="kd">function</span> <span class="nx">timer</span><span class="p">(){</span>
  <span class="k">return</span> <span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello Debounce!</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">logMsg</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">msg</span><span class="p">}</span><span class="s2"> Time: </span><span class="p">${</span><span class="nx">timer</span><span class="p">()}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">smartLogMsg</span> <span class="o">=</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">logMsg</span><span class="p">,</span> <span class="mi">400</span><span class="p">);</span>
<span class="nx">smartLogMsg</span><span class="p">();</span> <span class="c1">// will be called at 400+ ms.</span>
<span class="c1">// will be called at 700+ ms, hence cancel the previous.</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">smartLogMsg</span><span class="p">,</span> <span class="mi">300</span><span class="p">);</span>
<span class="c1">// will be called at 1200+ ms, will log normally</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">smartLogMsg</span><span class="p">,</span> <span class="mi">800</span><span class="p">);</span>

</code></pre></div></div>

<p>Output:</p>

<p>TODO</p>

<p>At this point, our debounce function is half complete and working for a few happy scenarios. To fix things further, and to understand the value of it, we have to add a little bit of complexity now.
Let‚Äôs build a small App!‚Ä¶ What it will do, you might ask?
Take user input.
Put through the debounce.
Use a ‚Äúfake‚Äù XHR call, which pretends that it‚Äôs processing the data on the server.
Put back the ‚Äúprocessed text‚Äù on the view, at a delayed rate.</p>

<p>Starting code:</p>

<p>However, if you run your code now, you will get output like below
Can you notice ‚Äúundefined‚Äù‚Ä¶.try in below fiddle (play with it)</p>

<p>What‚Äôs wrong here?‚Ä¶well, everything which can go wrong with this.We are losing the context. Let‚Äôs try to fix that.</p>

<h2 id="step-3-fix-thecontext">Step 3: Fix the¬†context</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">timeout</span><span class="p">;</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">executor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">timeout</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
        <span class="p">};</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
        <span class="nx">timeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">executor</span><span class="p">,</span> <span class="nx">wait</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>


<span class="nx">now</span> <span class="nx">the</span> <span class="nx">output</span> <span class="nx">is</span> <span class="nx">like</span> <span class="nx">below</span>
<span class="nx">Hurray</span><span class="o">!</span>
<span class="nx">No</span> <span class="nx">no</span><span class="err">‚Ä¶</span><span class="p">.</span><span class="nx">not</span> <span class="nx">so</span> <span class="nx">fast</span><span class="o">!</span><span class="err">‚Ä¶</span><span class="p">.</span><span class="nx">one</span> <span class="nx">more</span> <span class="nx">thing</span> <span class="nx">is</span> <span class="nx">pending</span><span class="p">.</span> <span class="nx">Can</span> <span class="nx">you</span> <span class="nx">see</span> <span class="nx">something</span> <span class="nx">odd</span> <span class="k">in</span> <span class="nx">below</span> <span class="nx">section</span> <span class="k">of</span> <span class="nx">code</span>

<span class="s2">```js
...
function handleInput() {
      doXhr(this.value).then(data =&gt; (output.innerHTML += `</span><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/li&gt;`</span><span class="se">))</span><span class="err">;
</span> <span class="p">}</span>
<span class="p">...</span>

</code></pre></div></div>
<p>Well, we are using this.value to get the entered text; nothing wrong in it, it‚Äôs just we can also use event.target.value instead of that. let‚Äôs do the change and see the output.
Changes:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="kd">function</span> <span class="nx">handleInput</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">inputData</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
        <span class="nx">doXhr</span><span class="p">(</span><span class="nx">inputData</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s2">`&lt;li&gt;</span><span class="p">${</span><span class="nx">data</span><span class="p">}</span><span class="s2">&lt;/li&gt;`</span><span class="p">));</span>
      <span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div>
<p>and when we run the code, disappointment is there on console
Why?‚Ä¶point is, we are not mapping the argument passed to the function properly. Let‚Äôs fix that.</p>

<h2 id="step-4-fix-the-function-arguments">Step 4: Fix the function arguments</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">timeout</span><span class="p">;</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">executor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">timeout</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
        <span class="p">};</span>
<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
        <span class="nx">timeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">executor</span><span class="p">,</span> <span class="nx">wait</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>

</code></pre></div></div>
<p>Now if you run the app, it will work like a charm, try below fiddle now.
Final working sample.</p>

<p>Bonus: Early¬†Debounce
Normally, in debounce we wait and then trigger the event. We do have a variant of debounce in which you first trigger and then wait for a fixed interval‚Ää-‚Ääit is called ‚ÄúEaly Debounce‚Äù.
This can be implemented as below with an optional argument.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span> <span class="nx">early</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">timeout</span><span class="p">;</span>
<span class="k">return</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">isEarlyEnable</span> <span class="o">=</span> <span class="o">!</span><span class="nx">timeout</span> <span class="o">&amp;&amp;</span> <span class="nx">early</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">executor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">timeout</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="o">!</span><span class="nx">early</span> <span class="o">&amp;&amp;</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
        <span class="p">};</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
        <span class="nx">timeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">executor</span><span class="p">,</span> <span class="nx">wait</span><span class="p">);</span>
        <span class="nx">isEarlyEnable</span> <span class="o">&amp;&amp;</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Thank You!
That‚Äôs all folk! let me know in the comment section if this article helped you.</p>

<script async="" src="//jsfiddle.net/ipraveen/bhjd7cx5/embed/result,js,html/"></script>

:ET